package com.mit.mittunnels;

import java.util.ArrayList;
import java.util.List;

import com.parse.FindCallback;
import com.parse.ParseException;
import com.parse.ParseObject;
import com.parse.ParseQuery;

import android.graphics.Point;

public class MITTunnelsLogic {
	private ArrayList<Point> _spots;
	private ArrayList<AccessPoint> _scannedAccessPoints;
	private static List<ParseObject>allObjects;
	
	public MITTunnelsLogic(){
		
		_spots = new ArrayList<Point>();
		_scannedAccessPoints = new ArrayList<AccessPoint>();
		
		allObjects	= new ArrayList<ParseObject>();
		
	}
	
public void getPointsFromDatabase() {

		
		ParseQuery<ParseObject> query = ParseQuery.getQuery("ScanResult");
		query.setLimit(1000);
		query.findInBackground(new FindCallback<ParseObject>() {
			   public void done(List<ParseObject> objects, ParseException e) {
				     if (e == null) {
				    	 allObjects.addAll(objects);
				    	 int skip=0;  int limit =1000;
							if (objects.size() == limit){
			                    skip = skip + limit;
			                    ParseQuery query = new ParseQuery("ScanResult");
			                    query.setSkip(skip);
			                    query.setLimit(limit);
			                    query.findInBackground(this);
			                }
							//We have a full PokeDex
			                else {
			                    //USE FULL DATA AS INTENDED
			                	
			                	for (int i=0; i<allObjects.size(); i++)
			                	{
			                		String x = allObjects.get(i).getString("x");
									String y = allObjects.get(i).getString("y");

									int fl_x = Integer.parseInt(x);
									int fl_y = Integer.parseInt(y);
									Point point = new Point(fl_x, fl_y);
									_spots.add(point);
			                	}
			                	
			                	
			                	
			                	//drawMap();
			                }
				     } else {
				      
				     }
				   }
				 });}



public Point getLocationBasedOnAccessPoints(ArrayList scannedAccessPoints){
	return new Point(50,50);
}
}
